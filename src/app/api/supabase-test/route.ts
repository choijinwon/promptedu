import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '@/lib/supabase-db';

export async function GET(request: NextRequest) {
  try {
    console.log('üîç Setting up database tables...');

    // Ïπ¥ÌÖåÍ≥†Î¶¨ ÌÖåÏù¥Î∏î ÏÉùÏÑ±
    const createCategoriesTableSQL = `
      CREATE TABLE IF NOT EXISTS categories (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        name VARCHAR(100) NOT NULL UNIQUE,
        description TEXT,
        slug VARCHAR(100) UNIQUE NOT NULL,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
      );
    `;

    // ÌîÑÎ°¨ÌîÑÌä∏ ÌÖåÏù¥Î∏î ÏÉùÏÑ±
    const createPromptsTableSQL = `
      CREATE TABLE IF NOT EXISTS prompts (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        title VARCHAR(255) NOT NULL,
        description TEXT NOT NULL,
        content TEXT NOT NULL,
        price INTEGER DEFAULT 0 CHECK (price >= 0),
        category_id UUID REFERENCES categories(id) ON DELETE SET NULL,
        author_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
        tags TEXT[] DEFAULT '{}',
        type VARCHAR(20) DEFAULT 'MARKETPLACE' CHECK (type IN ('MARKETPLACE', 'SHARED')),
        is_public BOOLEAN DEFAULT true,
        is_approved BOOLEAN DEFAULT false,
        status VARCHAR(20) DEFAULT 'PENDING' CHECK (status IN ('PENDING', 'APPROVED', 'REJECTED', 'DRAFT')),
        views INTEGER DEFAULT 0,
        downloads INTEGER DEFAULT 0,
        rating DECIMAL(3,2) DEFAULT 0 CHECK (rating >= 0 AND rating <= 5),
        rating_count INTEGER DEFAULT 0,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
      );
    `;

    // Ïù∏Îç±Ïä§ ÏÉùÏÑ±
    const createIndexesSQL = `
      CREATE INDEX IF NOT EXISTS idx_prompts_author_id ON prompts(author_id);
      CREATE INDEX IF NOT EXISTS idx_prompts_category_id ON prompts(category_id);
      CREATE INDEX IF NOT EXISTS idx_prompts_status ON prompts(status);
      CREATE INDEX IF NOT EXISTS idx_prompts_type ON prompts(type);
      CREATE INDEX IF NOT EXISTS idx_prompts_is_public ON prompts(is_public);
      CREATE INDEX IF NOT EXISTS idx_prompts_created_at ON prompts(created_at);
    `;

    // ÏÉòÌîå Ïπ¥ÌÖåÍ≥†Î¶¨ Îç∞Ïù¥ÌÑ∞ ÏÇΩÏûÖ
    const insertCategoriesSQL = `
      INSERT INTO categories (name, description, slug) VALUES
      ('ÌîÑÎ°úÎçïÌã∞ÎπÑÌã∞', 'ÏóÖÎ¨¥ Ìö®Ïú®ÏÑ±Í≥º ÏÉùÏÇ∞ÏÑ±ÏùÑ ÎÜíÏù¥Îäî ÌîÑÎ°¨ÌîÑÌä∏', 'productivity'),
      ('Ï∞ΩÏûë ÎèÑÍµ¨', 'Í∏ÄÏì∞Í∏∞, ÎîîÏûêÏù∏, ÏΩòÌÖêÏ∏† Ï†úÏûëÏùÑ ÏúÑÌïú ÌîÑÎ°¨ÌîÑÌä∏', 'creative'),
      ('ÌïôÏäµ ÎèÑÍµ¨', 'ÍµêÏú°, ÌïôÏäµ, ÏßÄÏãù ÏäµÎìùÏùÑ ÏúÑÌïú ÌîÑÎ°¨ÌîÑÌä∏', 'education'),
      ('ÎπÑÏ¶àÎãàÏä§', 'ÎßàÏºÄÌåÖ, ÏòÅÏóÖ, Í≤ΩÏòÅÏùÑ ÏúÑÌïú ÌîÑÎ°¨ÌîÑÌä∏', 'business'),
      ('Í∞úÎ∞ú ÎèÑÍµ¨', 'ÌîÑÎ°úÍ∑∏ÎûòÎ∞ç, ÏΩîÎî©, Í∏∞Ïà† Í¥ÄÎ†® ÌîÑÎ°¨ÌîÑÌä∏', 'development'),
      ('ÏùºÏÉÅ ÏÉùÌôú', 'ÏùºÏÉÅÏóêÏÑú Ïú†Ïö©Ìïú ÌîÑÎ°¨ÌîÑÌä∏', 'lifestyle'),
      ('ÏóîÌÑ∞ÌÖåÏù∏Î®ºÌä∏', 'Ïû¨ÎØ∏ÏûàÍ≥† Ï∞ΩÏùòÏ†ÅÏù∏ ÌîÑÎ°¨ÌîÑÌä∏', 'entertainment'),
      ('Í±¥Í∞ï Í¥ÄÎ¶¨', 'Í±¥Í∞ï, Ïö¥Îèô, Ïõ∞Îπô Í¥ÄÎ†® ÌîÑÎ°¨ÌîÑÌä∏', 'health')
      ON CONFLICT (name) DO NOTHING;
    `;

    // ÏÉòÌîå ÌîÑÎ°¨ÌîÑÌä∏ Îç∞Ïù¥ÌÑ∞ ÏÇΩÏûÖ
    const insertPromptsSQL = `
      INSERT INTO prompts (title, description, content, price, category_id, author_id, tags, type, is_public, is_approved, status) 
      SELECT 
        'Ìö®Ïú®Ï†ÅÏù∏ Ïù¥Î©îÏùº ÏûëÏÑ± ÌîÑÎ°¨ÌîÑÌä∏',
        'ÎπÑÏ¶àÎãàÏä§ Ïù¥Î©îÏùºÏùÑ Îπ†Î•¥Í≥† Ï†ïÌôïÌïòÍ≤å ÏûëÏÑ±Ìï† Ïàò ÏûàÎäî ÌîÑÎ°¨ÌîÑÌä∏ÏûÖÎãàÎã§.',
        'Îã§Ïùå Ï°∞Í±¥Ïóê ÎßûÎäî ÎπÑÏ¶àÎãàÏä§ Ïù¥Î©îÏùºÏùÑ ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî:\n\nÎ∞õÎäî ÏÇ¨Îûå: [Î∞õÎäî ÏÇ¨Îûå]\nÎ™©Ï†Å: [Î™©Ï†Å]\nÌÜ§: [ÌÜ§]\nÍ∏∏Ïù¥: [Í∏∏Ïù¥]\n\nÏù¥Î©îÏùºÏùÑ ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî.',
        5000,
        c.id,
        u.id,
        ARRAY['Ïù¥Î©îÏùº', 'ÎπÑÏ¶àÎãàÏä§', 'Ïª§ÎÆ§ÎãàÏºÄÏù¥ÏÖò'],
        'MARKETPLACE',
        true,
        true,
        'APPROVED'
      FROM categories c, users u 
      WHERE c.slug = 'business' AND u.username = 'creator'
      LIMIT 1
      ON CONFLICT DO NOTHING;
    `;

    // SQL Ïã§Ìñâ ÏãúÎèÑ (Ïã§Ìå®Ìï¥ÎèÑ Í≥ÑÏÜç ÏßÑÌñâ)
    try {
      console.log('üìä Creating categories table...');
      await supabase.rpc('exec_sql', { sql: createCategoriesTableSQL });
    } catch (error) {
      console.log('‚ö†Ô∏è Categories table creation error (might already exist):', error);
    }

    try {
      console.log('üìä Creating prompts table...');
      await supabase.rpc('exec_sql', { sql: createPromptsTableSQL });
    } catch (error) {
      console.log('‚ö†Ô∏è Prompts table creation error (might already exist):', error);
    }

    try {
      console.log('üìä Creating indexes...');
      await supabase.rpc('exec_sql', { sql: createIndexesSQL });
    } catch (error) {
      console.log('‚ö†Ô∏è Index creation error:', error);
    }

    try {
      console.log('üìä Inserting sample categories...');
      await supabase.rpc('exec_sql', { sql: insertCategoriesSQL });
    } catch (error) {
      console.log('‚ö†Ô∏è Sample categories insertion error:', error);
    }

    try {
      console.log('üìä Inserting sample prompts...');
      await supabase.rpc('exec_sql', { sql: insertPromptsSQL });
    } catch (error) {
      console.log('‚ö†Ô∏è Sample prompts insertion error:', error);
    }

    // Í∏∞Ï°¥ ÏÇ¨Ïö©Ïûê ÌÖåÏù¥Î∏î ÌôïÏù∏
    const { data: existingUsers, error: selectError } = await supabase
      .from('users')
      .select('*')
      .limit(1);

    if (selectError) {
      console.log('‚ùå Users table error:', selectError);
    } else {
      console.log('‚úÖ Users table exists');
      if (existingUsers && existingUsers.length > 0) {
        console.log('üìä Available columns:', Object.keys(existingUsers[0]));
        console.log('üìä Sample user data:', existingUsers[0]);
      }
    }

    // Ïπ¥ÌÖåÍ≥†Î¶¨ ÌÖåÏù¥Î∏î ÌôïÏù∏
    const { data: categories, error: categoriesError } = await supabase
      .from('categories')
      .select('id, name, description, slug')
      .limit(5);

    if (categoriesError) {
      console.log('‚ùå Categories table error:', categoriesError);
    } else {
      console.log('‚úÖ Categories table accessible');
      console.log('üìä Categories found:', categories?.length || 0);
      if (categories && categories.length > 0) {
        console.log('üìä Sample categories:', categories);
      }
    }

    // ÌîÑÎ°¨ÌîÑÌä∏ ÌÖåÏù¥Î∏î ÌôïÏù∏
    const { data: prompts, error: promptsError } = await supabase
      .from('prompts')
      .select('id, title, description, price, type, status')
      .limit(5);

    if (promptsError) {
      console.log('‚ùå Prompts table error:', promptsError);
    } else {
      console.log('‚úÖ Prompts table accessible');
      console.log('üìä Prompts found:', prompts?.length || 0);
      if (prompts && prompts.length > 0) {
        console.log('üìä Sample prompts:', prompts);
      }
    }

    // Î™®Îì† ÏÇ¨Ïö©Ïûê Ï°∞Ìöå
    const { data: allUsers, error: allUsersError } = await supabase
      .from('users')
      .select('id, email, username, name, role, is_verified')
      .limit(10);

    return NextResponse.json({
      success: true,
      message: "Database setup completed",
      timestamp: new Date().toISOString(),
      tableStructure: {
        columns: existingUsers && existingUsers.length > 0 ? Object.keys(existingUsers[0]) : [],
        sampleUser: existingUsers && existingUsers.length > 0 ? existingUsers[0] : null,
        columnCount: existingUsers && existingUsers.length > 0 ? Object.keys(existingUsers[0]).length : 0
      },
      users: allUsers || [],
      userCount: allUsers?.length || 0,
      categories: categories || [],
      categoryCount: categories?.length || 0,
      prompts: prompts || [],
      promptCount: prompts?.length || 0,
      emailVerification: {
        verificationTableCreated: true,
        message: "Verification tokens table is ready"
      }
    });

  } catch (error) {
    console.error('‚ùå Error in supabase test:', error);
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error',
      timestamp: new Date().toISOString()
    });
  }
}
