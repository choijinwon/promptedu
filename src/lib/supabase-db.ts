import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Supabase environment variables are not set');
  console.error('NEXT_PUBLIC_SUPABASE_URL:', !!supabaseUrl);
  console.error('SUPABASE_SERVICE_ROLE_KEY:', !!supabaseKey);
}

export const supabase = createClient(supabaseUrl!, supabaseKey!, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

// Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ ÌôïÏù∏ Ìï®Ïàò
export const checkSupabaseConnection = async () => {
  try {
    console.log('üîç Testing Supabase connection...');
    console.log('üîç Supabase URL:', process.env.NEXT_PUBLIC_SUPABASE_URL ? 'SET' : 'NOT_SET');
    console.log('üîç Supabase Key:', process.env.SUPABASE_SERVICE_ROLE_KEY ? 'SET' : 'NOT_SET');
    
    // Îçî Í∞ÑÎã®Ìïú ÌÖåÏä§Ìä∏ - ÌÖåÏù¥Î∏î Ï°¥Ïû¨ Ïó¨Î∂Ä ÌôïÏù∏
    const { data, error } = await supabase
      .from('users')
      .select('id')
      .limit(1);
    
    if (error) {
      console.error('‚ùå Supabase connection failed:', error);
      console.error('‚ùå Error code:', error.code);
      console.error('‚ùå Error message:', error.message);
      console.error('‚ùå Error details:', error.details);
      return false;
    }
    
    console.log('‚úÖ Supabase connection successful');
    console.log('‚úÖ Data received:', data);
    return true;
  } catch (error) {
    console.error('‚ùå Supabase connection error:', error);
    console.error('‚ùå Error type:', typeof error);
    console.error('‚ùå Error message:', error instanceof Error ? error.message : String(error));
    return false;
  }
};

// ÏÇ¨Ïö©Ïûê Ïù∏Ï¶ù Ìï®Ïàò (Supabase ÏÇ¨Ïö©)
export const authenticateUser = async (email: string, password: string) => {
  try {
    console.log('üîç Authenticating user with Supabase:', email);
    
    // Supabase AuthÎ•º ÏÇ¨Ïö©Ìïú Î°úÍ∑∏Ïù∏
    const { data, error } = await supabase.auth.signInWithPassword({
      email,
      password,
    });

    if (error) {
      console.error('‚ùå Supabase auth error:', error);
      return null;
    }

    console.log('‚úÖ User authenticated successfully');
    return data.user;
  } catch (error) {
    console.error('‚ùå Authentication error:', error);
    return null;
  }
};

// ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Ï°∞Ìöå
export const getUserById = async (userId: string) => {
  try {
    const { data, error } = await supabase
      .from('users')
      .select('*')
      .eq('id', userId)
      .single();

    if (error) {
      console.error('‚ùå Error fetching user:', error);
      return null;
    }

    return data;
  } catch (error) {
    console.error('‚ùå Error fetching user:', error);
    return null;
  }
};

// ÏÇ¨Ïö©Ïûê Ïù¥Î©îÏùºÎ°ú Ï°∞Ìöå
export const getUserByEmail = async (email: string) => {
  try {
    const { data, error } = await supabase
      .from('users')
      .select('*')
      .eq('email', email)
      .single();

    if (error) {
      console.error('‚ùå Error fetching user by email:', error);
      return null;
    }

    return data;
  } catch (error) {
    console.error('‚ùå Error fetching user by email:', error);
    return null;
  }
};
